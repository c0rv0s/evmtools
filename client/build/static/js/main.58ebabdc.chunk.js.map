{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextArea","Input","App","useState","encode","setEncode","structs","setStructs","api","setApi","structAargs","setStructArgs","signature","setSignature","params","setParams","target","setTarget","sigOnly","setSigOnly","winningFunction","setWinningFunction","winningType","setWinningType","encoded","setEncoded","error","setError","getStruct","a","structParams","split","flatMap","x","trim","fetch","JSON","stringify","then","response","json","data","console","winning_order_function","winning_order_type","catch","getEncoding","p","map","log","dataString","address","functionSignature","encodedParams","param","type","value","join","script","getSignature","className","onClick","rows","placeholder","onChange","e","length","s","replace","checked","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58ebabdc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport { Button, Input, Checkbox } from \"antd\";\nconst { TextArea } = Input;\n\nfunction App() {\n  const [encode, setEncode] = useState(false);\n  const [structs, setStructs] = useState(false);\n  const [api, setApi] = useState(false);\n  const [structAargs, setStructArgs] = useState(\"\");\n  const [signature, setSignature] = useState(\"\");\n  const [params, setParams] = useState(\"\");\n  const [target, setTarget] = useState(\"\");\n  const [sigOnly, setSigOnly] = useState(false);\n\n  const [winningFunction, setWinningFunction] = useState([]);\n  const [winningType, setWinningType] = useState([]);\n  const [encoded, setEncoded] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const getStruct = async () => {\n    setError(false);\n    const structParams = structAargs\n      .split(\";\")\n      .flatMap((x: string) => (x ? (x + \";\").trim() : []));\n\n    fetch(\"/api/pack_structs?struct=\" + JSON.stringify(structParams))\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.error) {\n          console.error(\"Error:\", error);\n          setError(true);\n          setWinningFunction([]);\n          setWinningType([]);\n        } else {\n          setWinningFunction(data.winning_order_function);\n          setWinningType(data.winning_order_type);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n        setError(true);\n        setWinningFunction([]);\n        setWinningType([]);\n      });\n  };\n\n  const encodingCall = () => {\n    setError(false);\n    if (sigOnly) getSignature();\n    else getEncoding();\n  };\n\n  const getEncoding = () => {\n    const p = params.split(\",\").map((p: string) => p.trim());\n    fetch(\n      \"/api/encode?signature=\" +\n        signature.trim() +\n        \"&params=\" +\n        JSON.stringify(p) +\n        \"&address=\" +\n        target\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data.data);\n        const dataString = `\n        Contract Address: ${data.data.address}\\n\n        Function signature: ${data.data.functionSignature}\\n\n        Params: ${data.data.encodedParams\n          .map(\n            (param: any) => `\n          Type: ${param.type}\n          Value: ${param.value}\n          Encoding: ${param.encoded}\n        `\n          )\n          .join(\"\\n\")}\n        Encoded script: ${data.data.script}\n        `;\n        setEncoded(dataString);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n        setError(true);\n        setEncoded(\"\");\n      });\n  };\n\n  const getSignature = () => {\n    fetch(\"/api/encode?signature=\" + signature.trim())\n      .then((response) => response.json())\n      .then((data) => {\n        const dataString = `Event signature: ${data.data}`;\n        setEncoded(dataString);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n        setError(true);\n        setEncoded(\"\");\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>EVM Tools</h1>\n      <span\n        className=\"page\"\n        onClick={() => {\n          setEncode(false);\n          setStructs(true);\n          setApi(false);\n        }}\n      >\n        Optimize Solidity Structs\n      </span>\n      <span\n        className=\"page\"\n        onClick={() => {\n          setEncode(true);\n          setStructs(false);\n          setApi(false);\n        }}\n      >\n        Encode EVM Data\n      </span>\n      <span\n        className=\"page\"\n        onClick={() => {\n          setEncode(false);\n          setStructs(false);\n          setApi(true);\n          setError(false);\n        }}\n      >\n        API Usage\n      </span>\n\n      <br />\n      <br />\n\n      {structs && (\n        <div>\n          Determine the optimal arrangement of struct parameters\n          <TextArea\n            className=\"inputs\"\n            rows={4}\n            placeholder=\"uint arg1; string arg2; bytes arg3; ...\"\n            value={structAargs}\n            onChange={(e) => setStructArgs(e.target.value)}\n          />\n          <br />\n          <br />\n          <Button type=\"primary\" onClick={getStruct}>\n            Optimize\n          </Button>\n          <br />\n          <br />\n          <div className=\"output\">\n            {winningFunction.length > 0 && (\n              <div>\n                Winning Order Function:\n                {winningFunction.map((s) => (\n                  <div>\n                    {s} <br />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          <br />\n          <br />\n          <div className=\"output\">\n            {winningType.length > 0 && (\n              <div>\n                Winning Order Type:\n                {winningType.map((s) => (\n                  <div>\n                    {s} <br />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      {encode && (\n        <div>\n          Encode an EVM function call\n          <Input\n            placeholder=\"Function signature, i.e. vote(uint,string)\"\n            className=\"inputs\"\n            value={signature}\n            onChange={(e) => setSignature(e.target.value.replace(/\\s/g, \"\"))}\n          />\n          <Checkbox\n            onChange={(e) => setSigOnly(e.target.checked)}\n            checked={sigOnly}\n          >\n            Event signature\n          </Checkbox>\n          <Input\n            placeholder=\"Params (comma separated)\"\n            className=\"inputs\"\n            value={params}\n            onChange={(e) => setParams(e.target.value)}\n          />\n          <Input\n            placeholder=\"Target contract address\"\n            className=\"inputs\"\n            value={target}\n            onChange={(e) => setTarget(e.target.value)}\n          />\n          <br />\n          <br />\n          <Button type=\"primary\" onClick={encodingCall}>\n            Encode\n          </Button>\n          <br />\n          <br />\n          <div className=\"output\">{encoded}</div>\n        </div>\n      )}\n      {api && (\n        <div>\n          Example API usage:\n          <p>Encode data:</p>\n          <a href=\"https://evm.tools/api/encode?signature=voteFor(uint)&params=[12]&address=0xBa37B002AbaFDd8E89a1995dA52740bbC013D992\">\n            https://evm.tools/api/encode?signature=voteFor(uint)&params=[12]&address=0xBa37B002AbaFDd8E89a1995dA52740bbC013D992\n          </a>\n          <br />\n          <br />\n          <p>Encode event signature:</p>\n          <a href=\"https://evm.tools/api/encode?signature=Voted(uint)\">\n            https://evm.tools/api/encode?signature=Voted(uint)\n          </a>\n          <br />\n          <br />\n          <p>Pack structs:</p>\n          <a href='https://evm.tools/api/pack_structs?struct=[\"uint nums;\", \"string name;\", \"bytes something;\"]'>\n            https://evm.tools/api/pack_structs?struct=[\"uint nums;\", \"string\n            name;\", \"bytes something;\"]\n          </a>\n        </div>\n      )}\n      <br />\n      <br />\n      {error && (\n        <span className=\"error\">There was an error in your inputs</span>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}